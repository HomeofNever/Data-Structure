bool grid::targetReached(std::list<std::string> words) const {
  if (words.size() == constraints.size()) {
    //@TODO
    std::list<std::string>::iterator wb = words.begin();
    while (wb != words.end()) {
      std::cout << *wb << " ";
      wb++;
    }
    std::cout << std::endl;

    std::list<unsigned int> c(constraints);
    std::list<unsigned int>::iterator cb = c.begin();
    while (cb != c.end()) {
      std::list<std::string>::iterator wb = words.begin();
      while (wb != words.end()) {
        if (*cb == (*wb).length()) {
          cb = c.erase(cb);
          wb = words.erase(wb);
          break;
        } else {
          wb++;
        }
      }
      cb++;
    }
    return c.size() == 0 && words.size() == 0;
  } else {
    return false;
  }
}


void solution::print_map(const std::vector<std::vector<char>> &map) const
{
  std::vector<std::vector<bool>>overlay = std::vector<std::vector<bool>>(row, std::vector<bool>(col, false));

  for (std::list<std::vector<unsigned int>>::const_iterator i = path.begin(); i != path.end(); i++)
  {
    unsigned int x1 = (*i)[0];
    unsigned int x2 = (*i)[2];
    unsigned int y1 = (*i)[1];
    unsigned int y2 = (*i)[3];

    if (y1 == y2)
    {
      // x axis
      for (unsigned int j = x1; j <= x2; j++)
      {
        overlay[y1][j] = true;
      }
    } else {
      // y axis
      for (unsigned int j = y1; j <= y2; j++)
      {
        overlay[j][x1] = true;
      }
    }
  }

  for (unsigned int i = 0; i < map.size(); i++) {
    for (unsigned int j = 0; j < map[i].size(); j++) {
      if (overlay[i][j])
      {
        std::cout << map[i][j];
      } else {
        std::cout << '#';
      }
    }
    std::cout << std::endl;
  }
}



  std::list<word>::const_iterator wb = w.begin();

  std::cout << "Size: " << w.size() << std::endl;
  while (wb != w.end())
  {
    (*wb).print();
    wb++;
  }